// <auto-generated />
using System;
using LG_Assignment.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LG_Assignment.Infrastructure.Migrations
{
    [DbContext(typeof(TaskDbContext))]
    partial class TaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LG_Assignment.Core.Entity.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCategoryId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.DeviceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("DeviceCategories");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.DevicePropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyItemId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PropertyItemId");

                    b.ToTable("DevicePropertyValues");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.PropertyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviceCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCategoryId");

                    b.ToTable("PropertyItems");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.Device", b =>
                {
                    b.HasOne("LG_Assignment.Core.Entity.DeviceCategory", "DeviceCategory")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceCategory");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.DevicePropertyValue", b =>
                {
                    b.HasOne("LG_Assignment.Core.Entity.Device", "Device")
                        .WithMany("PropertyValues")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LG_Assignment.Core.Entity.PropertyItem", "PropertyItem")
                        .WithMany()
                        .HasForeignKey("PropertyItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("PropertyItem");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.PropertyItem", b =>
                {
                    b.HasOne("LG_Assignment.Core.Entity.DeviceCategory", null)
                        .WithMany("PropertyItems")
                        .HasForeignKey("DeviceCategoryId");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.Device", b =>
                {
                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("LG_Assignment.Core.Entity.DeviceCategory", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("PropertyItems");
                });
#pragma warning restore 612, 618
        }
    }
}
